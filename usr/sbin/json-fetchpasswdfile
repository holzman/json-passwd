#!/usr/bin/python3
# Generate /etc/sssd/passwd from a remote JSON source.

#########################################################################
### Configuration #######################################################
#########################################################################

import filecmp, os

if 'JPCONF' in os.environ:
    configFile = os.environ['JPCONF']
else:
    configFile = '/etc/json-passwd/config'

#########################################################################
### Declarations ########################################################
#########################################################################

import datetime, json, optparse, os.path, re, requests, shlex, \
    shutil, subprocess, sys, syslog, tempfile, time
from packaging.version import Version

requiredElements = ['uid', 'gid', 'comment', 'homedir', 'shell']

tmpDir = tempfile.mkdtemp()

#########################################################################
### Subroutines #########################################################
#########################################################################

def cmd_external_stderr_to_return(cmdline):
    """
    Run a command with subprocess.Popen(), and send the first line of
    STDERR as a return value, and leave STDOUT to go to actual STDOUT.
    """
    proc = subprocess.Popen(shlex.split(cmdline.encode('ascii')),
        stderr=subprocess.PIPE)
    (out, err) = proc.communicate()
    value = err.rstrip()
    return value

def loggit(severity, message):
    """
    Write out error messages to our chosen locations.  If we get a
    severity of 'ERROR', then also exit with status code 1.
    """
    mypid = os.getpid()
    ts = datetime.datetime.fromtimestamp(
        time.time()).strftime('%Y-%m-%d_%H:%M:%S')
    loglocation = opt.logFile
    with open(loglocation, 'a+') as text_file:
        text_file.write(('[%s] %s %s: %s\n') % (mypid, ts, severity, message))
    if opt.debug:
        print((('[%s] %s %s: %s') % (mypid, ts, severity, message)))
    if severity == 'NOTICE':
        sys.stderr.write('%s: %s\n' % (severity, message))
    if severity == 'SUCCESS':
        sys.stderr.write('%s: %s\n' % (severity, message))
        syslog.syslog(syslog.LOG_INFO, "%s - %s: %s"
            % (os.path.basename(__file__), severity, message))
    if severity == 'ERROR':
        sys.stderr.write('%s: %s\n' % (severity, message))
        syslog.syslog(syslog.LOG_INFO, "%s - %s: %s"
            % (os.path.basename(__file__), severity, message))
        shutil.rmtree(tmpDir)
        sys.exit(1)

def parseConfig(file):
    """
    Load a json configuration from a configuration file.  Sets a global
    'config' variable.
    """
    global config

    try:
        config = json.load(open(file, 'r'))
    except IOError as e:
        print(("file error:  %s" % e))
        sys.exit(2)
    except Exception as e:
        print(("unknown error:  %s" % e))
        sys.exit(2)

    return config

def parseUsers(data):
    """
    Look at the 'users' data from the json data, and generates a list of
    passwd entries:

        USERNAME:*:UID:GID:COMMENT:HOMEDIR:SHELL

    Returns two items: an array of matching entries, and a count of
    entries that couldn't be parsed.
    """
    loggit('INFO', 'Processing users list')
    shortlist = []
    newDict = {}
    skip = {}

    users = data['users']
    success = []
    numFailures = 0

    if 'passwdIgnore' in config:
        for i in config['passwdIgnore']:
            skip[i] = 1

    if 'passwdUidMinimum' in config:
        minUid = config['passwdUidMinimum']
    else:
        minUid = 500

    for username in users:
        shortDict = users[username]
        keyFailures = []
        for requiredElement in requiredElements:
            if requiredElement not in shortDict:
                keyFailures.append(requiredElement)

        if len(keyFailures) > 0:
            loggit('NOTICE', '%s: missing key(s): %s' % (username,
                ','.join(keyFailures)))
            numFailures += 1

        else:
            uid = shortDict['uid']

        if username in skip:
            loggit('NOTICE', '%s - skipping user (passwdIgnore)' % username)
            numFailures += 1

        elif int(uid) < int(minUid):
            loggit('NOTICE', '%s - uid %d is <%d (passwdUidMinimum)'
                % (username, int(uid), int(minUid)))
            numFailures += 1

        elif (re.search('^[a-z0-9_][a-z0-9_-]*$', username)
              and re.search('^[0-9]+$', shortDict['uid'])
              and re.search('^[0-9]+$', shortDict['gid'])
              and isinstance(shortDict['comment'], str)
              and isinstance(shortDict['homedir'], str)
              and isinstance(shortDict['shell'], str)):
            shortlist.append(uid)
            userEntry = '%s:*:%s:%s:%s:%s:%s' % \
                (username, uid, shortDict['gid'], shortDict['comment'],
                shortDict['homedir'], shortDict['shell'])
            if uid not in newDict:
                newDict[uid] = []
            newDict[uid].append(userEntry)
        else:
            loggit('NOTICE', '%s - could not parse (%s)'
                % (username, shortDict))
            numFailures += 1

    shortlist = list(set(shortlist))
    shortlist.sort(key=int)
    for uid in shortlist:
        e = newDict[uid]
        for i in e:
            success.append(i)

    return success, numFailures

def populateUsersFile(data, success):
    """
    Populate /etc/sssd/passwd (or equivalent).  We do some checks to
    confirm that everything wrote out properly before we actually drop
    the file into place.
    """

    ts = datetime.datetime.fromtimestamp(
        data['generationTime']).strftime('%Y%m%d_%H-%M-%S')

    tmpFile = '%s/sanitized-user-%s.txt' % (tmpDir, ts)

    final = opt.file
    finalBak = final + '.bak'

    loggit('INFO', '%s: creating file and populating' % tmpFile)
    with open(tmpFile, 'w') as text_file:
        for item in success:
            text_file.write('%s\n' % item)

    loggit('INFO', '%s: validating' % tmpFile)
    if os.path.isfile(tmpFile):
        num_lines = sum(1 for line in open(tmpFile))
        if num_lines == len(success):
            loggit('INFO', '%s: correct number of users (%s)'
                % (tmpFile, len(success)))
        else:
            loggit('ERROR', '%s: contains %s entries, should be %s'
                % (tmpFile, num_lines, len(success)))
    else:
        loggit('ERROR', '%s: file not found' % (tmpFile))

    if os.path.isfile(final):
        if filecmp.cmp(tmpFile, final):
            loggit('INFO', '%s and %s are identical, no updating' % (tmpFile, final))
            return

        if os.path.isfile(final):
            loggit('INFO', 'cp %s %s' % (final, finalBak))
            shutil.copy2(final, finalBak)
    else:
        loggit('INFO', 'no old file at %s, no backup' % (final))

    loggit('INFO', 'cp %s %s' % (tmpFile, final))
    shutil.copy2(tmpFile, final)

    loggit('INFO', '%s: database is complete' % (final))

def proxyOrEmpty():
    """
    """

    if 'proxies' in config: return config['proxies']
    else: return {}

def retrieveJson(url):
    """
    Pull down a json-formatted file from a URL, and returns a requestUrl
    data object.
    """
    try:
        requestURL = requests.get(url, verify=False, timeout=4.00,
            proxies=proxyOrEmpty())
        if Version(requests.__version__) > Version('1.0.0'):
            data = requestURL.json()
        else:
            data = requestURL.json
    except:
        loggit('ERROR', 'failure while retrieving json data from URL (%s)'
            % (url))

    loggit('INFO', 'retrieved URL (%s)' % (url))
    return data

def validateMetadata(data):
    """
    Confirms that required fields are all present in the json data.
    Returns an error string or, if everything is okay, an empty string.
    """
    if 'generationTime' in data:
        if isinstance(data['generationTime'], float) or \
           isinstance(data['generationTime'], int):
            pass
        else:
            return 'generationTime: must be a float or an int'
    else:
        return 'generationTime: required field not present'

    if 'numberOfUsers' in data:
        if isinstance(data['numberOfUsers'], int):
            if data['numberOfUsers'] <= 0:
                return 'numberOfUsers: must be greater than 0'
        else:
            return 'numberOfUsers: must be an integer'
    else:
        return 'numberOfUsers: required field not present'

    if 'users' in data: pass
    else:
        return 'users: required hash is empty'

    return ''


#########################################################################
### main () #############################################################
#########################################################################

def main():
    parseConfig(configFile)

    usage = "%prog [options]"
    p = optparse.OptionParser(usage=usage,
        description="fetch passwd database data, write to raw passwd file")
    p.add_option('--file', dest='file', action='store',
        default=config['passwdFileRaw'], help='%default')
    p.add_option('--debug', dest='debug', action='store_true',
        help='set to print debugging information')
    p.add_option('--logFile', dest='logFile', action='store',
        default=config['logFile'], help='%default')
    p.add_option('--test', dest='test', action='store_true', default=False,
        help='if set, print output to STDOUT; default: %default')
    p.add_option('--url', dest='url', action='store',
        default=config['passwdUrl'], help='%default')
    p.add_option('--workDir', dest='workDir', action='store',
        default=config['workDir'], help='%default')

    global opt
    opt, args = p.parse_args()

    data = retrieveJson(opt.url)
    try:
        error = validateMetadata(data)
        if error != '': loggit('ERROR', error)

        (success, numFailures) = parseUsers(data)
        numSuccess = len(success)

        loggit('INFO', 'Number of good users [%s]' % (numSuccess))
        loggit('INFO', 'Number of failed users [%s]' % (numFailures))

        totalDetectedUsers = numSuccess + numFailures
        if totalDetectedUsers == data['numberOfUsers']:
            if (opt.test):
                for i in success: print(i)
            else:
                populateUsersFile(data, success)
                loggit('SUCCESS', "%s - good [%s], failed [%s]"
                    % (opt.file, numSuccess, numFailures))

        else:
            loggit('ERROR',
                "passwd count (%s) does not match 'numberOfUsers' (%s)"
                % (totalDetectedUsers, data['numberOfUsers']))

        shutil.rmtree(tmpDir)
        sys.exit(0)

    except Exception as e:
        loggit('ERROR', '(Python Error) %s' % (str(e)))

if __name__ == "__main__":
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################
## We use this to generate man pages.

"""

=head1 NAME

json-fetchpasswdfile - populate a raw passwd file from external json data

=head1 SYNOPSIS

B<json-fetchpasswdfile> [options]

=head1 USAGE

json-fetchpasswdfile pulls an external JSON-formatted list of Unix users,
converts it to a passwd file suitable for use with sss, and copies it
into place.  There are a variety of checks along the way to make sure
everything is working nicely.

=head1 OPTIONS

=over 4

=item I<--file> F<FILE>

Override the file we should build.  Default: /etc/sssd/passwd

=item I<--debug>

If set, prints debugging information to STDOUT.

=item I<--logFile> F<FILE>

Where should we send log messages?  Default: F</var/log/json-passwd.log>

=item I<--test>

If set, print logging output to STDOUT as well.  Default: false.

=item I<--url> I<URL>

From where should we retrieve the data?  Default is in the config file.

=item I<--workDir> F<DIRECTORY>

Where should we store files by default?  Default is in the config file.

=back

=head1 INPUT

The JSON should contain the following fields:

=over 4

=item generationTime

What time was this data generated?  Contents: int or float,
number-of-seconds since epoch.

=item numberOfUsers

How many entries should be in the 'users' field?  Contents: integer.

=item users

A hash of user entries.  The key for each value is the user name (must
be a parseable string); each entry should contain:

=over 4

=item comment

String containing the human-readable name.

=item gid

String containing the numeric gid.

=item homedir

String containing the user home directory.

=item shell

String containing the user shell.

=item uid

String containing the numeric uid.

=back

=back

=head1 FILES

=over 4

=item F</etc/json-passwd/config>

JSON-formatted configuration file.  Can be overridden with the environment
variable I<JPCONF>.

=back

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 COPYRIGHT

Copyright 2015-2021, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
